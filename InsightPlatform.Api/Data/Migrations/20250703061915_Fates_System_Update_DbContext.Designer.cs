// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsightPlatform.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250703061915_Fates_System_Update_DbContext")]
    partial class Fates_System_Update_DbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FatePointTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Fates")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TheologyRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TheologyRecordId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("FatePointTransactions");
                });

            modelBuilder.Entity("LuckyNumberProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HomePage")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UrlPathTemplate")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LuckyNumberProviders");
                });

            modelBuilder.Entity("LuckyNumberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CrawlUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CrossCheckedProviderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CrossCheckedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("LuckyNumberRecords");
                });

            modelBuilder.Entity("LuckyNumberRecordByKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Kind")
                        .HasColumnType("text");

                    b.Property<List<string>>("Numbers")
                        .HasColumnType("text[]");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LuckyNumberRecordByKinds");
                });

            modelBuilder.Entity("Pain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("ClientLocale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desire")
                        .HasColumnType("text");

                    b.Property<string>("Emotion")
                        .HasColumnType("text");

                    b.Property<string>("PainDetail")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<int?>("UrgencyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pains");
                });

            modelBuilder.Entity("ServicePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Fates")
                        .HasColumnType("integer");

                    b.Property<int?>("FatesDiscount")
                        .HasColumnType("integer");

                    b.Property<double?>("FatesDiscountRate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte>("ServiceKind")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("ServicePrices");
                });

            modelBuilder.Entity("TheologyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Input")
                        .HasColumnType("jsonb");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint");

                    b.Property<string>("PreData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Result")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ServicePriceId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("SystemPrompt")
                        .HasColumnType("text");

                    b.Property<string>("UniqueKey")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserPrompt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServicePriceId");

                    b.HasIndex("UserId");

                    b.ToTable("TheologyRecords");
                });

            modelBuilder.Entity("TopUpPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountDiscount")
                        .HasColumnType("numeric");

                    b.Property<double?>("AmountDiscountRate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Fate")
                        .HasColumnType("integer");

                    b.Property<int?>("FateBonus")
                        .HasColumnType("integer");

                    b.Property<double?>("FateBonusRate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TopUpPackages");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<byte>("Provider")
                        .HasColumnType("smallint");

                    b.Property<string>("ProviderTransaction")
                        .HasColumnType("jsonb");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TopUpPackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TopUpPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientLocale")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DisabledTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FacebookId")
                        .HasColumnType("text");

                    b.Property<int>("Fates")
                        .HasColumnType("integer");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FatePointTransaction", b =>
                {
                    b.HasOne("TheologyRecord", "TheologyRecord")
                        .WithMany("FatePointTransactions")
                        .HasForeignKey("TheologyRecordId");

                    b.HasOne("Transaction", "Transaction")
                        .WithMany("FatePointTransactions")
                        .HasForeignKey("TransactionId");

                    b.HasOne("User", "User")
                        .WithMany("FatePointTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheologyRecord");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LuckyNumberRecord", b =>
                {
                    b.HasOne("LuckyNumberProvider", "Provider")
                        .WithMany("Records")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Pain", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Pains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheologyRecord", b =>
                {
                    b.HasOne("ServicePrice", "ServicePrice")
                        .WithMany()
                        .HasForeignKey("ServicePriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("TheologyRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ServicePrice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("TopUpPackage", "TopUpPackage")
                        .WithMany("Transactions")
                        .HasForeignKey("TopUpPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopUpPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LuckyNumberProvider", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("TheologyRecord", b =>
                {
                    b.Navigation("FatePointTransactions");
                });

            modelBuilder.Entity("TopUpPackage", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Navigation("FatePointTransactions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("FatePointTransactions");

                    b.Navigation("Pains");

                    b.Navigation("TheologyRecords");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
