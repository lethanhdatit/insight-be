name: Deploy Insight API

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Create appsettings.Production.json from secret
        run: |
          echo "${{ secrets.APPSETTINGS_PRODUCTION_BASE64 }}" | base64 -d > InsightPlatform.Api/appsettings.Production.json

      - name: Generate deploy directory name
        id: vars
        run: echo "DEPLOY_DIR=~/deploy-insight-api-$(date +%s)" >> $GITHUB_ENV

      - name: Copy files to Azure VM
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          source: "."
          target: ${{ env.DEPLOY_DIR }}

      - name: Deploy on Azure VM via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            cd ${{ env.DEPLOY_DIR }}
            export TIMESTAMP=$(date +%s)

            mkdir -p ./socket

            docker-compose up -d --build

            timeout=30
            while [ ! -S ./socket/socket.sock ] && [ $timeout -gt 0 ]; do
              echo "Waiting for socket.sock..."
              sleep 1
              timeout=$((timeout - 1))
            done

            if [ ! -S ./socket/socket.sock ]; then
              echo "Deployment failed: socket.sock not created"
              docker-compose logs
              docker-compose down
              exit 1
            fi

            ln -sfn ${{ env.DEPLOY_DIR }} ~/deploy-insight-api

            sudo nginx -s reload

            sleep 2

            current_dir_name=$(basename "${{ env.DEPLOY_DIR }}")            
            for dir in ~/deploy-insight-api-*; do
              dir_name=$(basename "$dir")
              if [ "$dir_name" != "$current_dir_name" ]; then
                echo "Removing old deploy folder: $dir"
                rm -rf "$dir"
              fi
            done

            docker container prune -f
